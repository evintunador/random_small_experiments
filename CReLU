{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "eaf82769-736d-4502-b205-90fcdf46eb8e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# my virtual environments are rarely properly connected to jupyter so this fixes that\n",
    "import sys\n",
    "import os\n",
    "current_dir = os.getcwd()  # Get the current working directory\n",
    "venv_dir = os.path.join(current_dir, 'venv') \n",
    "python_version = str(sys.version_info.major) + '.' + str(sys.version_info.minor)\n",
    "site_packages_path = os.path.join(venv_dir, 'lib', 'python' + python_version, 'site-packages')\n",
    "sys.path.append(site_packages_path) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "562f334c-b16b-42ab-830c-03761b4daf0f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing pytorch\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "from torch.nn import functional as F\n",
    "import torch.optim as optim\n",
    "from torchvision import datasets, transforms\n",
    "from torch.utils.data import DataLoader\n",
    "\n",
    "# imports for the debugging/demonstration setup\n",
    "import functools\n",
    "import inspect\n",
    "\n",
    "# imports for the tokenizer\n",
    "from tokenizer import SimpleTokenizer, loaded_stoi, loaded_merges\n",
    "\n",
    "# Imports used for the config\n",
    "import dataclasses \n",
    "from typing import Optional\n",
    "\n",
    "# Imports used for the model\n",
    "import re\n",
    "from typing import Any, List, Sequence, Tuple, Union\n",
    "\n",
    "# used in the training loop\n",
    "import time\n",
    "\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "de1dc668-98b6-42e1-91e1-7bf10001068b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# this function will be used throughout for debugging/demonstration purposes\n",
    "# using this is way cleaner than cluttering up our code with print statements\n",
    "def log_io(func):\n",
    "    @functools.wraps(func)\n",
    "    def wrapper(self, *args, **kwargs):\n",
    "        # Check if logging is enabled globally and for the specific function\n",
    "        if not self.logging_enabled or func.__name__ in self.disabled_logging_functions:\n",
    "            return func(self, *args, **kwargs)\n",
    "        #if not self.logging_enabled:\n",
    "            #return func(self, *args, **kwargs)\n",
    "\n",
    "        def log_item(item, name, level=0, is_root=False):\n",
    "            indent = \"    \" * level\n",
    "            if isinstance(item, torch.Tensor):\n",
    "                print(f\"{indent}Tensor '{name}' shape: {item.shape}\")\n",
    "            elif isinstance(item, tuple):\n",
    "                if is_root and level == 0:\n",
    "                    # Root level tuple, don't print it as a tuple unless it's a \"true\" tuple\n",
    "                    for idx, sub_item in enumerate(item):\n",
    "                        log_item(sub_item, f\"{name}[{idx}]\", level)\n",
    "                else:\n",
    "                    print(f\"{indent}Tuple '{name}':\")\n",
    "                    for idx, sub_item in enumerate(item):\n",
    "                        log_item(sub_item, f\"{name}[{idx}]\", level + 1)\n",
    "            elif isinstance(item, int):\n",
    "                print(f\"{indent}Integer '{name}': Value={item}\")\n",
    "            elif isinstance(item, float):\n",
    "                print(f\"{indent}Float '{name}': Value={item}\")\n",
    "            else:\n",
    "                print(f\"{indent}Other-type '{name}': Type={type(item).__name__}, Value={item}\")\n",
    "\n",
    "        print(f\"\\n{'='*10}Entering {self.__class__.__name__}.{func.__name__}{'='*10}\")\n",
    "        print(\"Inputs:\")\n",
    "        arg_names = inspect.getfullargspec(func).args[1:]  # Excluding 'self'\n",
    "        arg_values = args + tuple(kwargs.values())\n",
    "        for name, value in zip(arg_names, arg_values):\n",
    "            log_item(value, name)\n",
    "\n",
    "        result = func(self, *args, **kwargs)\n",
    "        print(\"\\nOutputs:\")\n",
    "        if isinstance(result, tuple):\n",
    "            log_item(result, \"output\", is_root=True)\n",
    "        else:\n",
    "            log_item(result, \"output\")\n",
    "\n",
    "        print(f\"{'='*10}Exiting {self.__class__.__name__}.{func.__name__}{'='*10}\")\n",
    "        return result\n",
    "    return wrapper\n",
    "\n",
    "class LoggingModule(nn.Module):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.logging_enabled = False\n",
    "        self.disabled_logging_functions = set()\n",
    "\n",
    "    def enable_logging(self):\n",
    "        self.logging_enabled = True\n",
    "\n",
    "    def disable_logging(self):\n",
    "        self.logging_enabled = False\n",
    "\n",
    "    def disable_function_logging(self, func_name):\n",
    "        self.disabled_logging_functions.add(func_name)\n",
    "\n",
    "    def enable_function_logging(self, func_name):\n",
    "        self.disabled_logging_functions.discard(func_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "a1ef54bc-7b2c-49f7-ae86-86d9c05b9590",
   "metadata": {},
   "outputs": [],
   "source": [
    "device = 'mps'#'cuda' if torch.cuda.is_available() else 'cpu'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "908c33bf-891d-4d95-9d67-f14f8a02bcf1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz\n",
      "Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz to ./data/MNIST/raw/train-images-idx3-ubyte.gz\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|████████████| 9912422/9912422 [00:00<00:00, 16327975.30it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Extracting ./data/MNIST/raw/train-images-idx3-ubyte.gz to ./data/MNIST/raw\n",
      "\n",
      "Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz\n",
      "Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz to ./data/MNIST/raw/train-labels-idx1-ubyte.gz\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|████████████████| 28881/28881 [00:00<00:00, 51922714.88it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Extracting ./data/MNIST/raw/train-labels-idx1-ubyte.gz to ./data/MNIST/raw\n",
      "\n",
      "Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz to ./data/MNIST/raw/t10k-images-idx3-ubyte.gz\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|████████████| 1648877/1648877 [00:00<00:00, 18632176.83it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Extracting ./data/MNIST/raw/t10k-images-idx3-ubyte.gz to ./data/MNIST/raw\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz\n",
      "Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz to ./data/MNIST/raw/t10k-labels-idx1-ubyte.gz\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|███████████████████| 4542/4542 [00:00<00:00, 3050525.02it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Extracting ./data/MNIST/raw/t10k-labels-idx1-ubyte.gz to ./data/MNIST/raw\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "# Data transformation and normalization\n",
    "transform = transforms.Compose([\n",
    "    transforms.ToTensor(),\n",
    "    transforms.Normalize((0.1307,), (0.3081,))\n",
    "])\n",
    "\n",
    "# Downloading and loading the MNIST dataset\n",
    "train_dataset = datasets.MNIST(root='./data', train=True, transform=transform, download=True)\n",
    "test_dataset = datasets.MNIST(root='./data', train=False, transform=transform)\n",
    "\n",
    "# Creating data loaders\n",
    "train_loader = DataLoader(dataset=train_dataset, batch_size=64, shuffle=True)\n",
    "test_loader = DataLoader(dataset=test_dataset, batch_size=1000, shuffle=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "97e973df-14d8-42cb-9681-6bef04fd2cab",
   "metadata": {},
   "outputs": [],
   "source": [
    "class FFN(LoggingModule):\n",
    "    def __init__(self,\n",
    "                 activ_fn: nn.Module,\n",
    "                 embed_dim: int,\n",
    "                 mlp_multiplier: int,\n",
    "                 output_dim: int,\n",
    "                 dropout_rate: float = 0.1):\n",
    "        super().__init__()\n",
    "        self.embed_dim = embed_dim\n",
    "        self.mlp_multiplier = mlp_multiplier\n",
    "        self.hidden_size = embed_dim * mlp_multiplier\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.activ_fn = activ_fn\n",
    "\n",
    "        # the up and down projections\n",
    "        self.up_proj = nn.Linear(embed_dim, self.hidden_size)\n",
    "        self.down_proj = nn.Linear(self.hidden_size, output_dim)\n",
    "        \n",
    "    @log_io\n",
    "    def forward(self, x: torch.Tensor, training: bool = False ) -> torch.Tensor:\n",
    "        x = x.view(-1, self.embed_dim)\n",
    "        output = self.down(self.activ_fn(self.up(x)))\n",
    "        return F.dropout(output, p=self.dropout_rate, training=training)\n",
    "\n",
    "    @log_io\n",
    "    def up(self, x):\n",
    "        return self.up_proj(x)\n",
    "\n",
    "    @log_io\n",
    "    def down(self, x):\n",
    "        return self.down_proj(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "f92e0704-0537-4842-b3e3-2cd9b20c2f9f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4986.25 K parameters\n",
      "FFN(\n",
      "  (up_proj): Linear(in_features=784, out_features=6272, bias=True)\n",
      "  (down_proj): Linear(in_features=6272, out_features=10, bias=True)\n",
      ")\n",
      "\n",
      "==========Entering FFN.forward==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 784])\n",
      "\n",
      "==========Entering FFN.up==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 784])\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 6272])\n",
      "==========Exiting FFN.up==========\n",
      "\n",
      "==========Entering FFN.down==========\n",
      "Inputs:\n"
     ]
    },
    {
     "ename": "RuntimeError",
     "evalue": "Boolean value of Tensor with more than one value is ambiguous",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[131], line 5\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28mprint\u001b[39m(module)\n\u001b[1;32m      4\u001b[0m module\u001b[38;5;241m.\u001b[39menable_logging()\n\u001b[0;32m----> 5\u001b[0m output \u001b[38;5;241m=\u001b[39m module(torch\u001b[38;5;241m.\u001b[39mrandn(\u001b[38;5;241m32\u001b[39m, \u001b[38;5;241m28\u001b[39m\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m28\u001b[39m))\n\u001b[1;32m      6\u001b[0m \u001b[38;5;28;01mdel\u001b[39;00m module, output\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1518\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1516\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1517\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1518\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1527\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1522\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1523\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1524\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1525\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1526\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1527\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m forward_call(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m   1529\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1530\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "Cell \u001b[0;32mIn[25], line 39\u001b[0m, in \u001b[0;36mlog_io.<locals>.wrapper\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m     36\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m name, value \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mzip\u001b[39m(arg_names, arg_values):\n\u001b[1;32m     37\u001b[0m     log_item(value, name)\n\u001b[0;32m---> 39\u001b[0m result \u001b[38;5;241m=\u001b[39m func(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m     40\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124mOutputs:\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m     41\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(result, \u001b[38;5;28mtuple\u001b[39m):\n",
      "Cell \u001b[0;32mIn[130], line 22\u001b[0m, in \u001b[0;36mFFN.forward\u001b[0;34m(self, x, training)\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[38;5;129m@log_io\u001b[39m\n\u001b[1;32m     20\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mforward\u001b[39m(\u001b[38;5;28mself\u001b[39m, x: torch\u001b[38;5;241m.\u001b[39mTensor, training: \u001b[38;5;28mbool\u001b[39m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m torch\u001b[38;5;241m.\u001b[39mTensor:\n\u001b[1;32m     21\u001b[0m     x \u001b[38;5;241m=\u001b[39m x\u001b[38;5;241m.\u001b[39mview(\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39membed_dim)\n\u001b[0;32m---> 22\u001b[0m     output \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdown(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mactiv_fn(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mup(x)))\n\u001b[1;32m     23\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m F\u001b[38;5;241m.\u001b[39mdropout(output, p\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdropout_rate, training\u001b[38;5;241m=\u001b[39mtraining)\n",
      "Cell \u001b[0;32mIn[25], line 37\u001b[0m, in \u001b[0;36mlog_io.<locals>.wrapper\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m     35\u001b[0m arg_values \u001b[38;5;241m=\u001b[39m args \u001b[38;5;241m+\u001b[39m \u001b[38;5;28mtuple\u001b[39m(kwargs\u001b[38;5;241m.\u001b[39mvalues())\n\u001b[1;32m     36\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m name, value \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mzip\u001b[39m(arg_names, arg_values):\n\u001b[0;32m---> 37\u001b[0m     log_item(value, name)\n\u001b[1;32m     39\u001b[0m result \u001b[38;5;241m=\u001b[39m func(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m     40\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124mOutputs:\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "Cell \u001b[0;32mIn[25], line 30\u001b[0m, in \u001b[0;36mlog_io.<locals>.wrapper.<locals>.log_item\u001b[0;34m(item, name, level, is_root)\u001b[0m\n\u001b[1;32m     28\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mindent\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124mFloat \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mname\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m: Value=\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mitem\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m     29\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m---> 30\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mindent\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124mOther-type \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mname\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m: Type=\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mtype\u001b[39m(item)\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__name__\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m, Value=\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mitem\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:2488\u001b[0m, in \u001b[0;36mModule.__repr__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   2485\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__repr__\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m   2486\u001b[0m     \u001b[38;5;66;03m# We treat the extra repr like the sub-module, one item per line\u001b[39;00m\n\u001b[1;32m   2487\u001b[0m     extra_lines \u001b[38;5;241m=\u001b[39m []\n\u001b[0;32m-> 2488\u001b[0m     extra_repr \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mextra_repr()\n\u001b[1;32m   2489\u001b[0m     \u001b[38;5;66;03m# empty string will be split into list ['']\u001b[39;00m\n\u001b[1;32m   2490\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m extra_repr:\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/nn/modules/activation.py:104\u001b[0m, in \u001b[0;36mReLU.extra_repr\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    103\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mextra_repr\u001b[39m(\u001b[38;5;28mself\u001b[39m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28mstr\u001b[39m:\n\u001b[0;32m--> 104\u001b[0m     inplace_str \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124minplace=True\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39minplace \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[1;32m    105\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m inplace_str\n",
      "\u001b[0;31mRuntimeError\u001b[0m: Boolean value of Tensor with more than one value is ambiguous"
     ]
    }
   ],
   "source": [
    "module = FFN(nn.ReLU, 28*28, 8, 10)\n",
    "print(sum(p.numel() for p in module.parameters())/1e3, 'K parameters')\n",
    "print(module)\n",
    "module.enable_logging()\n",
    "output = module(torch.randn(32, 28*28))\n",
    "del module, output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "4b5f5aac-ba44-4dd5-a984-e47ffa8abfe2",
   "metadata": {},
   "outputs": [],
   "source": [
    "class GeLU(LoggingModule):\n",
    "    def __init__(self,\n",
    "                 embed_dim: int,\n",
    "                 mlp_multiplier: int,\n",
    "                 output_dim: int,\n",
    "                 dropout_rate: float = 0.1):\n",
    "        super().__init__()\n",
    "        self.embed_dim = embed_dim\n",
    "        self.mlp_multiplier = mlp_multiplier\n",
    "        self.hidden_size = embed_dim * mlp_multiplier\n",
    "        self.dropout_rate = dropout_rate\n",
    "\n",
    "        # the up and down projections\n",
    "        self.up_proj = nn.Linear(embed_dim, self.hidden_size)\n",
    "        self.down_proj = nn.Linear(self.hidden_size, output_dim)\n",
    "        \n",
    "    @log_io\n",
    "    def forward(self, x: torch.Tensor, training: bool = False ) -> torch.Tensor:\n",
    "        x = x.view(-1, self.embed_dim)\n",
    "        output = self.down(F.gelu(self.up(x)))\n",
    "        return F.dropout(output, p=self.dropout_rate, training=training)\n",
    "\n",
    "    @log_io\n",
    "    def up(self, x):\n",
    "        return self.up_proj(x)\n",
    "\n",
    "    @log_io\n",
    "    def down(self, x):\n",
    "        return self.down_proj(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "f565abbf-93ad-470d-a8b4-4455e492fa3c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4986.25 K parameters\n",
      "GeLU(\n",
      "  (up_proj): Linear(in_features=784, out_features=6272, bias=True)\n",
      "  (down_proj): Linear(in_features=6272, out_features=10, bias=True)\n",
      ")\n",
      "\n",
      "==========Entering GeLU.forward==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 784])\n",
      "\n",
      "==========Entering GeLU.up==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 784])\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 6272])\n",
      "==========Exiting GeLU.up==========\n",
      "\n",
      "==========Entering GeLU.down==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 6272])\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 10])\n",
      "==========Exiting GeLU.down==========\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 10])\n",
      "==========Exiting GeLU.forward==========\n"
     ]
    }
   ],
   "source": [
    "module = GeLU(28*28, 8, 10)\n",
    "print(sum(p.numel() for p in module.parameters())/1e3, 'K parameters')\n",
    "print(module)\n",
    "module.enable_logging()\n",
    "output = module(torch.randn(32, 28*28))\n",
    "del module, output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "b63596b8-e5dc-40dc-9ebf-2cf62defb4b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "class SiLU(LoggingModule):\n",
    "    def __init__(self,\n",
    "                 embed_dim: int,\n",
    "                 mlp_multiplier: int,\n",
    "                 output_dim: int,\n",
    "                 dropout_rate: float = 0.1):\n",
    "        super().__init__()\n",
    "        self.embed_dim = embed_dim\n",
    "        self.mlp_multiplier = mlp_multiplier\n",
    "        self.hidden_size = embed_dim * mlp_multiplier\n",
    "        self.dropout_rate = dropout_rate\n",
    "\n",
    "        # the up and down projections\n",
    "        self.up_proj = nn.Linear(embed_dim, self.hidden_size)\n",
    "        self.down_proj = nn.Linear(self.hidden_size, output_dim)\n",
    "        \n",
    "    @log_io\n",
    "    def forward(self, x: torch.Tensor, training: bool = False ) -> torch.Tensor:\n",
    "        x = x.view(-1, self.embed_dim)\n",
    "        output = self.down(F.silu(self.up(x)))\n",
    "        return F.dropout(output, p=self.dropout_rate, training=training)\n",
    "\n",
    "    @log_io\n",
    "    def up(self, x):\n",
    "        return self.up_proj(x)\n",
    "\n",
    "    @log_io\n",
    "    def down(self, x):\n",
    "        return self.down_proj(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "152d455b-d5b3-45f3-ac1a-1b715444c0d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4986.25 K parameters\n",
      "SiLU(\n",
      "  (up_proj): Linear(in_features=784, out_features=6272, bias=True)\n",
      "  (down_proj): Linear(in_features=6272, out_features=10, bias=True)\n",
      ")\n",
      "\n",
      "==========Entering SiLU.forward==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 784])\n",
      "\n",
      "==========Entering SiLU.up==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 784])\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 6272])\n",
      "==========Exiting SiLU.up==========\n",
      "\n",
      "==========Entering SiLU.down==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 6272])\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 10])\n",
      "==========Exiting SiLU.down==========\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 10])\n",
      "==========Exiting SiLU.forward==========\n"
     ]
    }
   ],
   "source": [
    "module = SiLU(28*28, 8, 10)\n",
    "print(sum(p.numel() for p in module.parameters())/1e3, 'K parameters')\n",
    "print(module)\n",
    "module.enable_logging()\n",
    "output = module(torch.randn(32, 28*28))\n",
    "del module, output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "32a0e22a-a4f5-4593-b0ab-2fc6793f824d",
   "metadata": {},
   "outputs": [],
   "source": [
    "class ReGLU(LoggingModule):\n",
    "    def __init__(self,\n",
    "                 embed_dim: int,\n",
    "                 mlp_multiplier: int,\n",
    "                 output_dim: int,\n",
    "                 dropout_rate: float = 0.1):\n",
    "        super().__init__()\n",
    "        self.embed_dim = embed_dim\n",
    "        self.mlp_multiplier = mlp_multiplier\n",
    "        self.hidden_size = embed_dim * mlp_multiplier\n",
    "        self.dropout_rate = dropout_rate\n",
    "\n",
    "        # the gate, up and down projections\n",
    "        self.gate_proj = nn.Linear(embed_dim, self.hidden_size)\n",
    "        self.up_proj = nn.Linear(embed_dim, self.hidden_size)\n",
    "        self.down_proj = nn.Linear(self.hidden_size, output_dim)\n",
    "        \n",
    "    @log_io\n",
    "    def forward(self, x: torch.Tensor, training: bool = False ) -> torch.Tensor:\n",
    "        x = x.view(-1, self.embed_dim)\n",
    "        output = self.down(self.fuse(self.gate(x),self.up(x)))\n",
    "        return F.dropout(output, p=self.dropout_rate, training=training)\n",
    "\n",
    "    @log_io\n",
    "    def up(self, x):\n",
    "        return self.up_proj(x)\n",
    "\n",
    "    @log_io\n",
    "    def gate(self, x):\n",
    "        return F.relu(self.gate_proj(x))\n",
    "\n",
    "    @log_io\n",
    "    def fuse(self, up, gate):\n",
    "        return up * gate\n",
    "\n",
    "    @log_io\n",
    "    def down(self, x):\n",
    "        return self.down_proj(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "94e4ed61-f139-481e-aa9e-88f6133c2012",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4954.89 K parameters\n",
      "ReGLU(\n",
      "  (gate_proj): Linear(in_features=784, out_features=3136, bias=True)\n",
      "  (up_proj): Linear(in_features=784, out_features=3136, bias=True)\n",
      "  (down_proj): Linear(in_features=3136, out_features=10, bias=True)\n",
      ")\n",
      "\n",
      "==========Entering ReGLU.forward==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 784])\n",
      "\n",
      "==========Entering ReGLU.gate==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 784])\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 3136])\n",
      "==========Exiting ReGLU.gate==========\n",
      "\n",
      "==========Entering ReGLU.up==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 784])\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 3136])\n",
      "==========Exiting ReGLU.up==========\n",
      "\n",
      "==========Entering ReGLU.fuse==========\n",
      "Inputs:\n",
      "Tensor 'up' shape: torch.Size([32, 3136])\n",
      "Tensor 'gate' shape: torch.Size([32, 3136])\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 3136])\n",
      "==========Exiting ReGLU.fuse==========\n",
      "\n",
      "==========Entering ReGLU.down==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 3136])\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 10])\n",
      "==========Exiting ReGLU.down==========\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 10])\n",
      "==========Exiting ReGLU.forward==========\n"
     ]
    }
   ],
   "source": [
    "module = ReGLU(28*28, 4, 10)\n",
    "print(sum(p.numel() for p in module.parameters())/1e3, 'K parameters')\n",
    "print(module)\n",
    "module.enable_logging()\n",
    "output = module(torch.randn(32, 28*28))\n",
    "del module, output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "7cab37a6-332c-484a-b040-857c4a51604d",
   "metadata": {},
   "outputs": [],
   "source": [
    "class GeGLU(LoggingModule):\n",
    "    def __init__(self,\n",
    "                 embed_dim: int,\n",
    "                 mlp_multiplier: int,\n",
    "                 output_dim: int,\n",
    "                 dropout_rate: float = 0.1):\n",
    "        super().__init__()\n",
    "        self.embed_dim = embed_dim\n",
    "        self.mlp_multiplier = mlp_multiplier\n",
    "        self.hidden_size = embed_dim * mlp_multiplier\n",
    "        self.dropout_rate = dropout_rate\n",
    "\n",
    "        # the gate, up and down projections\n",
    "        self.gate_proj = nn.Linear(embed_dim, self.hidden_size)\n",
    "        self.up_proj = nn.Linear(embed_dim, self.hidden_size)\n",
    "        self.down_proj = nn.Linear(self.hidden_size, output_dim)\n",
    "        \n",
    "    @log_io\n",
    "    def forward(self, x: torch.Tensor, training: bool = False ) -> torch.Tensor:\n",
    "        x = x.view(-1, self.embed_dim)\n",
    "        output = self.down(self.fuse(self.gate(x),self.up(x)))\n",
    "        return F.dropout(output, p=self.dropout_rate, training=training)\n",
    "\n",
    "    @log_io\n",
    "    def up(self, x):\n",
    "        return self.up_proj(x)\n",
    "\n",
    "    @log_io\n",
    "    def gate(self, x):\n",
    "        return F.gelu(self.gate_proj(x))\n",
    "\n",
    "    @log_io\n",
    "    def fuse(self, up, gate):\n",
    "        return up * gate\n",
    "\n",
    "    @log_io\n",
    "    def down(self, x):\n",
    "        return self.down_proj(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "39c2f3b7-962e-4ecf-b340-e0ef3008112f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4954.89 K parameters\n",
      "GeGLU(\n",
      "  (gate_proj): Linear(in_features=784, out_features=3136, bias=True)\n",
      "  (up_proj): Linear(in_features=784, out_features=3136, bias=True)\n",
      "  (down_proj): Linear(in_features=3136, out_features=10, bias=True)\n",
      ")\n",
      "\n",
      "==========Entering GeGLU.forward==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 784])\n",
      "\n",
      "==========Entering GeGLU.gate==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 784])\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 3136])\n",
      "==========Exiting GeGLU.gate==========\n",
      "\n",
      "==========Entering GeGLU.up==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 784])\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 3136])\n",
      "==========Exiting GeGLU.up==========\n",
      "\n",
      "==========Entering GeGLU.fuse==========\n",
      "Inputs:\n",
      "Tensor 'up' shape: torch.Size([32, 3136])\n",
      "Tensor 'gate' shape: torch.Size([32, 3136])\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 3136])\n",
      "==========Exiting GeGLU.fuse==========\n",
      "\n",
      "==========Entering GeGLU.down==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 3136])\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 10])\n",
      "==========Exiting GeGLU.down==========\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 10])\n",
      "==========Exiting GeGLU.forward==========\n"
     ]
    }
   ],
   "source": [
    "module = GeGLU(28*28, 4, 10)\n",
    "print(sum(p.numel() for p in module.parameters())/1e3, 'K parameters')\n",
    "print(module)\n",
    "module.enable_logging()\n",
    "output = module(torch.randn(32, 28*28))\n",
    "del module, output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "0113ca59-5252-4af0-a03d-3186145831f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "class SwiGLU(LoggingModule):\n",
    "    def __init__(self,\n",
    "                 embed_dim: int,\n",
    "                 mlp_multiplier: int,\n",
    "                 output_dim: int,\n",
    "                 dropout_rate: float = 0.1):\n",
    "        super().__init__()\n",
    "        self.embed_dim = embed_dim\n",
    "        self.mlp_multiplier = mlp_multiplier\n",
    "        self.hidden_size = embed_dim * mlp_multiplier\n",
    "        self.dropout_rate = dropout_rate\n",
    "\n",
    "        # the gate, up and down projections\n",
    "        self.gate_proj = nn.Linear(embed_dim, self.hidden_size)\n",
    "        self.up_proj = nn.Linear(embed_dim, self.hidden_size)\n",
    "        self.down_proj = nn.Linear(self.hidden_size, output_dim)\n",
    "        \n",
    "    @log_io\n",
    "    def forward(self, x: torch.Tensor, training: bool = False ) -> torch.Tensor:\n",
    "        x = x.view(-1, self.embed_dim)\n",
    "        output = self.down(self.fuse(self.gate(x),self.up(x)))\n",
    "        return F.dropout(output, p=self.dropout_rate, training=training)\n",
    "\n",
    "    @log_io\n",
    "    def up(self, x):\n",
    "        return self.up_proj(x)\n",
    "\n",
    "    @log_io\n",
    "    def gate(self, x):\n",
    "        return F.silu(self.gate_proj(x))\n",
    "\n",
    "    @log_io\n",
    "    def fuse(self, up, gate):\n",
    "        return up * gate\n",
    "\n",
    "    @log_io\n",
    "    def down(self, x):\n",
    "        return self.down_proj(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "98981a50-19df-4040-9e43-33e910e7f4a6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4954.89 K parameters\n",
      "SwiGLU(\n",
      "  (gate_proj): Linear(in_features=784, out_features=3136, bias=True)\n",
      "  (up_proj): Linear(in_features=784, out_features=3136, bias=True)\n",
      "  (down_proj): Linear(in_features=3136, out_features=10, bias=True)\n",
      ")\n",
      "\n",
      "==========Entering SwiGLU.forward==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 784])\n",
      "\n",
      "==========Entering SwiGLU.gate==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 784])\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 3136])\n",
      "==========Exiting SwiGLU.gate==========\n",
      "\n",
      "==========Entering SwiGLU.up==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 784])\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 3136])\n",
      "==========Exiting SwiGLU.up==========\n",
      "\n",
      "==========Entering SwiGLU.fuse==========\n",
      "Inputs:\n",
      "Tensor 'up' shape: torch.Size([32, 3136])\n",
      "Tensor 'gate' shape: torch.Size([32, 3136])\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 3136])\n",
      "==========Exiting SwiGLU.fuse==========\n",
      "\n",
      "==========Entering SwiGLU.down==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 3136])\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 10])\n",
      "==========Exiting SwiGLU.down==========\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 10])\n",
      "==========Exiting SwiGLU.forward==========\n"
     ]
    }
   ],
   "source": [
    "module = SwiGLU(28*28, 4, 10)\n",
    "print(sum(p.numel() for p in module.parameters())/1e3, 'K parameters')\n",
    "print(module)\n",
    "module.enable_logging()\n",
    "output = module(torch.randn(32, 28*28))\n",
    "del module, output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "3111446c-52ff-4c36-b441-e6724d6ad461",
   "metadata": {},
   "outputs": [],
   "source": [
    "class ReSplit(LoggingModule):\n",
    "    def __init__(self,\n",
    "                 embed_dim: int,\n",
    "                 mlp_multiplier: int,\n",
    "                 output_dim: int,\n",
    "                 dropout_rate: float = 0.1):\n",
    "        super().__init__()\n",
    "        self.embed_dim = embed_dim\n",
    "        self.mlp_multiplier = mlp_multiplier\n",
    "        self.hidden_size = embed_dim * mlp_multiplier\n",
    "        self.dropout_rate = dropout_rate\n",
    "\n",
    "        self.gate_proj = nn.Linear(embed_dim, self.hidden_size//2)\n",
    "        self.up_proj = nn.Linear(embed_dim, self.hidden_size//2)\n",
    "        self.down_proj = nn.Linear(self.hidden_size, output_dim)\n",
    "\n",
    "    @log_io\n",
    "    def forward(self, x, training=False):\n",
    "        x = x.view(-1, self.embed_dim)\n",
    "        up = self.up(x)\n",
    "        pos, neg = self.gate(x)\n",
    "        fuse = self.fuse(up, pos, neg)\n",
    "        output = self.down(fuse)\n",
    "        return F.dropout(output, p=self.dropout_rate, training=training)\n",
    "\n",
    "    @log_io\n",
    "    def up(self, x):\n",
    "        return self.up_proj(x)\n",
    "\n",
    "    @log_io\n",
    "    def gate(self, x):\n",
    "        gate = self.gate_proj(x)\n",
    "        pos = F.relu(gate)\n",
    "        neg = F.relu(-1.0*gate)\n",
    "        return pos, neg\n",
    "\n",
    "    @log_io\n",
    "    def fuse(self, up, pos, neg):\n",
    "        pos_fuse = up * pos\n",
    "        neg_fuse = up * neg\n",
    "        return torch.cat([pos_fuse, neg_fuse], dim=-1)\n",
    "\n",
    "    @log_io\n",
    "    def down(self, x):\n",
    "        return self.down_proj(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "e84465ed-b986-454f-bcdd-31decd5cb315",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4986.25 K parameters\n",
      "ReSplit(\n",
      "  (gate_proj): Linear(in_features=784, out_features=3136, bias=True)\n",
      "  (up_proj): Linear(in_features=784, out_features=3136, bias=True)\n",
      "  (down_proj): Linear(in_features=6272, out_features=10, bias=True)\n",
      ")\n",
      "\n",
      "==========Entering ReSplit.forward==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 784])\n",
      "\n",
      "==========Entering ReSplit.up==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 784])\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 3136])\n",
      "==========Exiting ReSplit.up==========\n",
      "\n",
      "==========Entering ReSplit.gate==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 784])\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output[0]' shape: torch.Size([32, 3136])\n",
      "Tensor 'output[1]' shape: torch.Size([32, 3136])\n",
      "==========Exiting ReSplit.gate==========\n",
      "\n",
      "==========Entering ReSplit.fuse==========\n",
      "Inputs:\n",
      "Tensor 'up' shape: torch.Size([32, 3136])\n",
      "Tensor 'pos' shape: torch.Size([32, 3136])\n",
      "Tensor 'neg' shape: torch.Size([32, 3136])\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 6272])\n",
      "==========Exiting ReSplit.fuse==========\n",
      "\n",
      "==========Entering ReSplit.down==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 6272])\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 10])\n",
      "==========Exiting ReSplit.down==========\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 10])\n",
      "==========Exiting ReSplit.forward==========\n"
     ]
    }
   ],
   "source": [
    "module = ReSplit(28*28, 8, 10)\n",
    "print(sum(p.numel() for p in module.parameters())/1e3, 'K parameters')\n",
    "print(module)\n",
    "module.enable_logging()\n",
    "output = module(torch.randn(32, 28*28))\n",
    "del module, output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "e69cfc48-3053-4f55-9482-af3f2aa5eca6",
   "metadata": {},
   "outputs": [],
   "source": [
    "class GeSplit(LoggingModule):\n",
    "    def __init__(self,\n",
    "                 embed_dim: int,\n",
    "                 mlp_multiplier: int,\n",
    "                 output_dim: int,\n",
    "                 dropout_rate: float = 0.1):\n",
    "        super().__init__()\n",
    "        self.embed_dim = embed_dim\n",
    "        self.mlp_multiplier = mlp_multiplier\n",
    "        self.hidden_size = embed_dim * mlp_multiplier\n",
    "        self.dropout_rate = dropout_rate\n",
    "\n",
    "        self.gate_proj = nn.Linear(embed_dim, self.hidden_size//2)\n",
    "        self.up_proj = nn.Linear(embed_dim, self.hidden_size//2)\n",
    "        self.down_proj = nn.Linear(self.hidden_size, output_dim)\n",
    "\n",
    "    @log_io\n",
    "    def forward(self, x, training=False):\n",
    "        x = x.view(-1, self.embed_dim)\n",
    "        up = self.up(x)\n",
    "        pos, neg = self.gate(x)\n",
    "        fuse = self.fuse(up, pos, neg)\n",
    "        output = self.down(fuse)\n",
    "        return F.dropout(output, p=self.dropout_rate, training=training)\n",
    "\n",
    "    @log_io\n",
    "    def up(self, x):\n",
    "        return self.up_proj(x)\n",
    "\n",
    "    @log_io\n",
    "    def gate(self, x):\n",
    "        gate = self.gate_proj(x)\n",
    "        pos = F.gelu(gate)\n",
    "        neg = F.gelu(-1.0*gate)\n",
    "        return pos, neg\n",
    "\n",
    "    @log_io\n",
    "    def fuse(self, up, pos, neg):\n",
    "        pos_fuse = up * pos\n",
    "        neg_fuse = up * neg\n",
    "        return torch.cat([pos_fuse, neg_fuse], dim=-1)\n",
    "\n",
    "    @log_io\n",
    "    def down(self, x):\n",
    "        return self.down_proj(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "ec566e2b-fd02-46d0-b817-1141fb279e0b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4986.25 K parameters\n",
      "GeSplit(\n",
      "  (gate_proj): Linear(in_features=784, out_features=3136, bias=True)\n",
      "  (up_proj): Linear(in_features=784, out_features=3136, bias=True)\n",
      "  (down_proj): Linear(in_features=6272, out_features=10, bias=True)\n",
      ")\n",
      "\n",
      "==========Entering GeSplit.forward==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 784])\n",
      "\n",
      "==========Entering GeSplit.up==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 784])\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 3136])\n",
      "==========Exiting GeSplit.up==========\n",
      "\n",
      "==========Entering GeSplit.gate==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 784])\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output[0]' shape: torch.Size([32, 3136])\n",
      "Tensor 'output[1]' shape: torch.Size([32, 3136])\n",
      "==========Exiting GeSplit.gate==========\n",
      "\n",
      "==========Entering GeSplit.fuse==========\n",
      "Inputs:\n",
      "Tensor 'up' shape: torch.Size([32, 3136])\n",
      "Tensor 'pos' shape: torch.Size([32, 3136])\n",
      "Tensor 'neg' shape: torch.Size([32, 3136])\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 6272])\n",
      "==========Exiting GeSplit.fuse==========\n",
      "\n",
      "==========Entering GeSplit.down==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 6272])\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 10])\n",
      "==========Exiting GeSplit.down==========\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 10])\n",
      "==========Exiting GeSplit.forward==========\n"
     ]
    }
   ],
   "source": [
    "module = GeSplit(28*28, 8, 10)\n",
    "print(sum(p.numel() for p in module.parameters())/1e3, 'K parameters')\n",
    "print(module)\n",
    "module.enable_logging()\n",
    "output = module(torch.randn(32, 28*28))\n",
    "del module, output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "dcc04e34-09bc-4e67-9fce-5908bea03b94",
   "metadata": {},
   "outputs": [],
   "source": [
    "class SwiSplit(LoggingModule):\n",
    "    def __init__(self,\n",
    "                 embed_dim: int,\n",
    "                 mlp_multiplier: int,\n",
    "                 output_dim: int,\n",
    "                 dropout_rate: float = 0.1):\n",
    "        super().__init__()\n",
    "        self.embed_dim = embed_dim\n",
    "        self.mlp_multiplier = mlp_multiplier\n",
    "        self.hidden_size = embed_dim * mlp_multiplier\n",
    "        self.dropout_rate = dropout_rate\n",
    "\n",
    "        self.gate_proj = nn.Linear(embed_dim, self.hidden_size//2)\n",
    "        self.up_proj = nn.Linear(embed_dim, self.hidden_size//2)\n",
    "        self.down_proj = nn.Linear(self.hidden_size, output_dim)\n",
    "\n",
    "    @log_io\n",
    "    def forward(self, x, training=False):\n",
    "        x = x.view(-1, self.embed_dim)\n",
    "        up = self.up(x)\n",
    "        pos, neg = self.gate(x)\n",
    "        fuse = self.fuse(up, pos, neg)\n",
    "        output = self.down(fuse)\n",
    "        return F.dropout(output, p=self.dropout_rate, training=training)\n",
    "\n",
    "    @log_io\n",
    "    def up(self, x):\n",
    "        return self.up_proj(x)\n",
    "\n",
    "    @log_io\n",
    "    def gate(self, x):\n",
    "        gate = self.gate_proj(x)\n",
    "        pos = F.silu(gate)\n",
    "        neg = F.silu(-1.0*gate)\n",
    "        return pos, neg\n",
    "\n",
    "    @log_io\n",
    "    def fuse(self, up, pos, neg):\n",
    "        pos_fuse = up * pos\n",
    "        neg_fuse = up * neg\n",
    "        return torch.cat([pos_fuse, neg_fuse], dim=-1)\n",
    "\n",
    "    @log_io\n",
    "    def down(self, x):\n",
    "        return self.down_proj(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "318fb139-edab-4be1-b7e8-12b88dae8b97",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4986.25 K parameters\n",
      "SwiSplit(\n",
      "  (gate_proj): Linear(in_features=784, out_features=3136, bias=True)\n",
      "  (up_proj): Linear(in_features=784, out_features=3136, bias=True)\n",
      "  (down_proj): Linear(in_features=6272, out_features=10, bias=True)\n",
      ")\n",
      "\n",
      "==========Entering SwiSplit.forward==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 784])\n",
      "\n",
      "==========Entering SwiSplit.up==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 784])\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 3136])\n",
      "==========Exiting SwiSplit.up==========\n",
      "\n",
      "==========Entering SwiSplit.gate==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 784])\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output[0]' shape: torch.Size([32, 3136])\n",
      "Tensor 'output[1]' shape: torch.Size([32, 3136])\n",
      "==========Exiting SwiSplit.gate==========\n",
      "\n",
      "==========Entering SwiSplit.fuse==========\n",
      "Inputs:\n",
      "Tensor 'up' shape: torch.Size([32, 3136])\n",
      "Tensor 'pos' shape: torch.Size([32, 3136])\n",
      "Tensor 'neg' shape: torch.Size([32, 3136])\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 6272])\n",
      "==========Exiting SwiSplit.fuse==========\n",
      "\n",
      "==========Entering SwiSplit.down==========\n",
      "Inputs:\n",
      "Tensor 'x' shape: torch.Size([32, 6272])\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 10])\n",
      "==========Exiting SwiSplit.down==========\n",
      "\n",
      "Outputs:\n",
      "Tensor 'output' shape: torch.Size([32, 10])\n",
      "==========Exiting SwiSplit.forward==========\n"
     ]
    }
   ],
   "source": [
    "module = SwiSplit(28*28, 8, 10)\n",
    "print(sum(p.numel() for p in module.parameters())/1e3, 'K parameters')\n",
    "print(module)\n",
    "module.enable_logging()\n",
    "output = module(torch.randn(32, 28*28))\n",
    "del module, output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "c6afb335-38d1-45bd-bb42-01f4aebc692d",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[123], line 46\u001b[0m\n\u001b[1;32m     43\u001b[0m results \u001b[38;5;241m=\u001b[39m {}\n\u001b[1;32m     45\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m mlp_variant \u001b[38;5;129;01min\u001b[39;00m mlp_variants:\n\u001b[0;32m---> 46\u001b[0m     average_accuracy \u001b[38;5;241m=\u001b[39m train_and_test(mlp_variant)\n\u001b[1;32m     47\u001b[0m     results[mlp_variant\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__class__\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__name__\u001b[39m] \u001b[38;5;241m=\u001b[39m average_accuracy\n\u001b[1;32m     49\u001b[0m \u001b[38;5;66;03m# Plotting the results\u001b[39;00m\n",
      "Cell \u001b[0;32mIn[123], line 10\u001b[0m, in \u001b[0;36mtrain_and_test\u001b[0;34m(model, runs, epochs)\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m epoch \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;241m1\u001b[39m, epochs \u001b[38;5;241m+\u001b[39m \u001b[38;5;241m1\u001b[39m):\n\u001b[1;32m      9\u001b[0m     model\u001b[38;5;241m.\u001b[39mtrain()\n\u001b[0;32m---> 10\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m data, target \u001b[38;5;129;01min\u001b[39;00m train_loader:\n\u001b[1;32m     11\u001b[0m         data, target \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mto(device), target\u001b[38;5;241m.\u001b[39mto(device)\n\u001b[1;32m     12\u001b[0m         optimizer\u001b[38;5;241m.\u001b[39mzero_grad()\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/utils/data/dataloader.py:630\u001b[0m, in \u001b[0;36m_BaseDataLoaderIter.__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    627\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_sampler_iter \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    628\u001b[0m     \u001b[38;5;66;03m# TODO(https://github.com/pytorch/pytorch/issues/76750)\u001b[39;00m\n\u001b[1;32m    629\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_reset()  \u001b[38;5;66;03m# type: ignore[call-arg]\u001b[39;00m\n\u001b[0;32m--> 630\u001b[0m data \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_next_data()\n\u001b[1;32m    631\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_num_yielded \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[1;32m    632\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_dataset_kind \u001b[38;5;241m==\u001b[39m _DatasetKind\u001b[38;5;241m.\u001b[39mIterable \u001b[38;5;129;01mand\u001b[39;00m \\\n\u001b[1;32m    633\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_IterableDataset_len_called \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m \\\n\u001b[1;32m    634\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_num_yielded \u001b[38;5;241m>\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_IterableDataset_len_called:\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/utils/data/dataloader.py:674\u001b[0m, in \u001b[0;36m_SingleProcessDataLoaderIter._next_data\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    672\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_next_data\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m    673\u001b[0m     index \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_next_index()  \u001b[38;5;66;03m# may raise StopIteration\u001b[39;00m\n\u001b[0;32m--> 674\u001b[0m     data \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_dataset_fetcher\u001b[38;5;241m.\u001b[39mfetch(index)  \u001b[38;5;66;03m# may raise StopIteration\u001b[39;00m\n\u001b[1;32m    675\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_pin_memory:\n\u001b[1;32m    676\u001b[0m         data \u001b[38;5;241m=\u001b[39m _utils\u001b[38;5;241m.\u001b[39mpin_memory\u001b[38;5;241m.\u001b[39mpin_memory(data, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_pin_memory_device)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/utils/data/_utils/fetch.py:51\u001b[0m, in \u001b[0;36m_MapDatasetFetcher.fetch\u001b[0;34m(self, possibly_batched_index)\u001b[0m\n\u001b[1;32m     49\u001b[0m         data \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdataset\u001b[38;5;241m.\u001b[39m__getitems__(possibly_batched_index)\n\u001b[1;32m     50\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m---> 51\u001b[0m         data \u001b[38;5;241m=\u001b[39m [\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdataset[idx] \u001b[38;5;28;01mfor\u001b[39;00m idx \u001b[38;5;129;01min\u001b[39;00m possibly_batched_index]\n\u001b[1;32m     52\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m     53\u001b[0m     data \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdataset[possibly_batched_index]\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/utils/data/_utils/fetch.py:51\u001b[0m, in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     49\u001b[0m         data \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdataset\u001b[38;5;241m.\u001b[39m__getitems__(possibly_batched_index)\n\u001b[1;32m     50\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m---> 51\u001b[0m         data \u001b[38;5;241m=\u001b[39m [\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdataset[idx] \u001b[38;5;28;01mfor\u001b[39;00m idx \u001b[38;5;129;01min\u001b[39;00m possibly_batched_index]\n\u001b[1;32m     52\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m     53\u001b[0m     data \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdataset[possibly_batched_index]\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torchvision/datasets/mnist.py:145\u001b[0m, in \u001b[0;36mMNIST.__getitem__\u001b[0;34m(self, index)\u001b[0m\n\u001b[1;32m    142\u001b[0m img \u001b[38;5;241m=\u001b[39m Image\u001b[38;5;241m.\u001b[39mfromarray(img\u001b[38;5;241m.\u001b[39mnumpy(), mode\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mL\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    144\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtransform \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m--> 145\u001b[0m     img \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtransform(img)\n\u001b[1;32m    147\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtarget_transform \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    148\u001b[0m     target \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtarget_transform(target)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torchvision/transforms/transforms.py:95\u001b[0m, in \u001b[0;36mCompose.__call__\u001b[0;34m(self, img)\u001b[0m\n\u001b[1;32m     93\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m, img):\n\u001b[1;32m     94\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m t \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtransforms:\n\u001b[0;32m---> 95\u001b[0m         img \u001b[38;5;241m=\u001b[39m t(img)\n\u001b[1;32m     96\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m img\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1518\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1516\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1517\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1518\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1527\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1522\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1523\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1524\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1525\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1526\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1527\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m forward_call(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m   1529\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1530\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torchvision/transforms/transforms.py:277\u001b[0m, in \u001b[0;36mNormalize.forward\u001b[0;34m(self, tensor)\u001b[0m\n\u001b[1;32m    269\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mforward\u001b[39m(\u001b[38;5;28mself\u001b[39m, tensor: Tensor) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Tensor:\n\u001b[1;32m    270\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    271\u001b[0m \u001b[38;5;124;03m    Args:\u001b[39;00m\n\u001b[1;32m    272\u001b[0m \u001b[38;5;124;03m        tensor (Tensor): Tensor image to be normalized.\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    275\u001b[0m \u001b[38;5;124;03m        Tensor: Normalized Tensor image.\u001b[39;00m\n\u001b[1;32m    276\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 277\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m F\u001b[38;5;241m.\u001b[39mnormalize(tensor, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmean, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstd, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39minplace)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torchvision/transforms/functional.py:363\u001b[0m, in \u001b[0;36mnormalize\u001b[0;34m(tensor, mean, std, inplace)\u001b[0m\n\u001b[1;32m    360\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(tensor, torch\u001b[38;5;241m.\u001b[39mTensor):\n\u001b[1;32m    361\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mimg should be Tensor Image. Got \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mtype\u001b[39m(tensor)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m--> 363\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m F_t\u001b[38;5;241m.\u001b[39mnormalize(tensor, mean\u001b[38;5;241m=\u001b[39mmean, std\u001b[38;5;241m=\u001b[39mstd, inplace\u001b[38;5;241m=\u001b[39minplace)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torchvision/transforms/_functional_tensor.py:922\u001b[0m, in \u001b[0;36mnormalize\u001b[0;34m(tensor, mean, std, inplace)\u001b[0m\n\u001b[1;32m    920\u001b[0m mean \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mas_tensor(mean, dtype\u001b[38;5;241m=\u001b[39mdtype, device\u001b[38;5;241m=\u001b[39mtensor\u001b[38;5;241m.\u001b[39mdevice)\n\u001b[1;32m    921\u001b[0m std \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mas_tensor(std, dtype\u001b[38;5;241m=\u001b[39mdtype, device\u001b[38;5;241m=\u001b[39mtensor\u001b[38;5;241m.\u001b[39mdevice)\n\u001b[0;32m--> 922\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m (std \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m)\u001b[38;5;241m.\u001b[39many():\n\u001b[1;32m    923\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mstd evaluated to zero after conversion to \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdtype\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m, leading to division by zero.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    924\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m mean\u001b[38;5;241m.\u001b[39mndim \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m:\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "# Function to train and test the model\n",
    "def train_and_test(model, runs=3, epochs=10):\n",
    "    accuracies = []\n",
    "    for run in range(runs):\n",
    "        criterion = nn.CrossEntropyLoss()\n",
    "        optimizer = optim.Adam(model.parameters(), lr=0.001, weight_decay=0.05)\n",
    "        \n",
    "        for epoch in range(1, epochs + 1):\n",
    "            model.train()\n",
    "            for data, target in train_loader:\n",
    "                data, target = data.to(device), target.to(device)\n",
    "                optimizer.zero_grad()\n",
    "                output = model(data, training=True)\n",
    "                loss = criterion(output, target)\n",
    "                loss.backward()\n",
    "                optimizer.step()\n",
    "\n",
    "        model.eval()\n",
    "        correct = 0\n",
    "        with torch.no_grad():\n",
    "            for data, target in test_loader:\n",
    "                data, target = data.to(device), target.to(device)\n",
    "                output = model(data)\n",
    "                pred = output.argmax(dim=1, keepdim=True)\n",
    "                correct += pred.eq(target.view_as(pred)).sum().item()\n",
    "\n",
    "        accuracy = 100. * correct / len(test_loader.dataset)\n",
    "        accuracies.append(accuracy)\n",
    "        print(f\"Run {run + 1}/{runs}, Accuracy: {accuracy:.2f}%\")\n",
    "    \n",
    "    return sum(accuracies) / len(accuracies)\n",
    "\n",
    "# Testing different MLPs\n",
    "mlp_variants = [ReLU(28*28, 8, 10).to(device),\n",
    "                GeLU(28*28, 8, 10).to(device),\n",
    "                SiLU(28*28, 8, 10).to(device),\n",
    "                ReGLU(28*28, 4, 10).to(device), \n",
    "                GeGLU(28*28, 4, 10).to(device),\n",
    "                SwiGLU(28*28, 4, 10).to(device),\n",
    "                ReSplit(28*28, 8, 10).to(device),\n",
    "                GeSplit(28*28, 8, 10).to(device),\n",
    "                SwiSplit(28*28, 8, 10).to(device)]\n",
    "results = {}\n",
    "\n",
    "for mlp_variant in mlp_variants:\n",
    "    average_accuracy = train_and_test(mlp_variant)\n",
    "    results[mlp_variant.__class__.__name__] = average_accuracy\n",
    "\n",
    "# Plotting the results\n",
    "plt.bar(results.keys(), results.values())\n",
    "plt.xlabel('MLP Variants')\n",
    "plt.ylabel('Average Test Accuracy (%)')\n",
    "plt.title('Comparison of MLP Variants on MNIST')\n",
    "plt.ylim(95, 100)  # Set the y-axis to start at 95% and end at 100%\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "89202952-8767-48f4-9cdf-42d7f85bcaf2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
